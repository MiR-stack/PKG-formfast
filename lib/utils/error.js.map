{"version":3,"file":"error.js","sources":["../../src/utils/error.ts"],"sourcesContent":["import {\r\n  defaultErrorsTypes,\r\n  errorTypes,\r\n  newElementTypes,\r\n  valuesTypes,\r\n} from \"../types\";\r\n\r\n/**\r\n * ? make usefull function for submit function\r\n */\r\n\r\n// interface handleErrorPropTypes {\r\n//   defaultErrors: defaultErrorsTypes;\r\n//   values: valuesTypes;\r\n// }\r\n\r\n// export const handleError = ({\r\n//   defaultErrors,\r\n//   values,\r\n// }: handleErrorPropTypes) => {\r\n//   let error: errorTypes = {};\r\n\r\n//   Object.keys(defaultErrors).forEach((name) => {\r\n//     if (!values[name]) {\r\n//       error[name] = defaultErrors[name].error;\r\n//     }\r\n//   });\r\n\r\n//   return error;\r\n// };\r\n\r\ninterface handleValidationPropTypes {\r\n  name: string;\r\n  values: valuesTypes;\r\n  defaultErrors: defaultErrorsTypes;\r\n}\r\n\r\nexport const handleValidation = ({\r\n  name,\r\n  values,\r\n  defaultErrors,\r\n}: handleValidationPropTypes) => {\r\n  let error: string | newElementTypes = \"\";\r\n\r\n  if (!values[name]) {\r\n    error = defaultErrors[name].error;\r\n  }\r\n\r\n  if (defaultErrors[name].type === \"password\") {\r\n    if (!values[name]) {\r\n      error = defaultErrors[name].error;\r\n    } else if (values[name].toString().length < 6) {\r\n      error = \"Passwords must be at least 6 characters long.\";\r\n    } else if (\r\n      !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[^\\s]{6,}$/.test(\r\n        values[name].toString()\r\n      )\r\n    ) {\r\n      error =\r\n        \"Passwords must contain a mix of uppercase and lowercase letters, numbers, and symbols.\";\r\n    }\r\n  }\r\n\r\n  if (defaultErrors[name].type === \"email\") {\r\n    if (!values[name]) {\r\n      error = defaultErrors[name].error;\r\n    } else if (!/^([^\\s@]+@[^\\s@]+\\.[^\\s@]+)*$/.test(values[name].toString())) {\r\n      error = \"Please enter a valid email address.\";\r\n    }\r\n  }\r\n\r\n  return error;\r\n};\r\n\r\nexport const isError = (error: errorTypes) => {\r\n  let isError = false;\r\n\r\n  Object.keys(error).forEach((name) => {\r\n    if (error[name]) {\r\n      isError = true;\r\n    }\r\n  });\r\n\r\n  return isError;\r\n};\r\n"],"names":[],"mappings":"AAqCO,MAAM,gBAAgB,GAAG,CAAC,EAC/B,IAAI,EACJ,MAAM,EACN,aAAa,GACa,KAAI;IAC9B,IAAI,KAAK,GAA6B,EAAE,CAAC;AAEzC,IAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACjB,QAAA,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;KACnC;IAED,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,EAAE;AAC3C,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACjB,YAAA,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;SACnC;AAAM,aAAA,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,KAAK,GAAG,+CAA+C,CAAC;SACzD;AAAM,aAAA,IACL,CAAC,0DAA0D,CAAC,IAAI,CAC9D,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CACxB,EACD;YACA,KAAK;AACH,gBAAA,wFAAwF,CAAC;SAC5F;KACF;IAED,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;AACxC,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACjB,YAAA,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;SACnC;AAAM,aAAA,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE;YACzE,KAAK,GAAG,qCAAqC,CAAC;SAC/C;KACF;AAED,IAAA,OAAO,KAAK,CAAC;AACf,EAAE;AAEW,MAAA,OAAO,GAAG,CAAC,KAAiB,KAAI;IAC3C,IAAI,OAAO,GAAG,KAAK,CAAC;IAEpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;AAClC,QAAA,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;YACf,OAAO,GAAG,IAAI,CAAC;SAChB;AACH,KAAC,CAAC,CAAC;AAEH,IAAA,OAAO,OAAO,CAAC;AACjB;;;;"}